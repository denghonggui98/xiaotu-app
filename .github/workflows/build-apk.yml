name: Build APK

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.8'

    - name: Install system dependencies
      run: |
        sudo apt update
        sudo apt install -y build-essential git python3 python3-dev ffmpeg libsdl2-dev libsdl2-image-dev libsdl2-mixer-dev libsdl2-ttf-dev libportmidi-dev libswscale-dev libavformat-dev libavcodec-dev zlib1g-dev

    - name: Install Python dependencies
      run: |
        pip install --upgrade pip
        pip install cython==0.29.30
        pip install buildozer

    - name: Build APK (let Buildozer handle everything)
      run: |
        # 完全让Buildozer自主处理Android环境配置
        # 不设置任何Android环境变量，不预先创建目录
        echo "开始构建，让Buildozer自主处理所有Android环境配置..."
        buildozer android debug

    - name: Debug information
      if: always()
      run: |
        echo "=== 构建后调试信息 ==="
        echo "当前目录内容:"
        ls -la
        echo ""
        
        echo "检查.buildozer目录:"
        if [ -d ".buildozer" ]; then
          echo ".buildozer目录内容:"
          ls -la .buildozer/
          echo ""
          
          if [ -d ".buildozer/android" ]; then
            echo ".buildozer/android目录内容:"
            ls -la .buildozer/android/
            echo ""
            
            if [ -d ".buildozer/android/platform" ]; then
              echo ".buildozer/android/platform目录内容:"
              ls -la .buildozer/android/platform/
            fi
          fi
        else
          echo ".buildozer目录不存在"
        fi
        echo ""
        
        echo "检查bin目录:"
        if [ -d "bin" ]; then
          echo "bin目录内容:"
          ls -la bin/
        else
          echo "bin目录不存在"
        fi
        echo ""
        
        echo "查找所有APK文件:"
        find . -name "*.apk" 2>/dev/null || echo "未找到APK文件"

    - name: Upload APK
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: xiaotu-app-apk
        path: |
          bin/*.apk
          *.apk
          */*.apk

    - name: Create Release
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: ncipollo/release-action@v1
      with:
        tag: v${{ github.run_number }}
        name: Release v${{ github.run_number }}
        artifacts: |
          bin/*.apk
          *.apk
          */*.apk
        token: ${{ secrets.GITHUB_TOKEN }}